generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  name          String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  color         String?
  avatarUrl     String?
  backgroundUrl String?
  tweets        Tweet[]
  myTweets      Tweet[]   @relation("myTweets")
  likes         Like[]
  replys        Reply[]
  followers     Follows[] @relation("followers")
  following     Follows[] @relation("following")
}

model Follows {
  id          Int  @id @default(autoincrement())
  follower    User @relation("followers", fields: [followerId], references: [id])
  followerId  Int
  following   User @relation("following", fields: [followingId], references: [id])
  followingId Int

  @@index([followerId])
  @@index([followingId])
}

model Tweet {
  id          Int      @id @default(autoincrement())
  text        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  createdBy   User     @relation("myTweets", fields: [createdById], references: [id])
  createdById Int
  imageUrl    String?
  views       Int      @default(0)
  likes       Like[]
  replys      Reply[]

  @@index([userId], name: "userId")
  @@index([createdById], name: "createdById")
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  tweet     Tweet    @relation(fields: [tweetId], references: [id])
  tweetId   Int

  @@index([userId], name: "userId")
  @@index([tweetId], name: "tweetId")
}

model Reply {
  id        Int      @id @default(autoincrement())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  tweet     Tweet    @relation(fields: [tweetId], references: [id])
  tweetId   Int

  @@index([userId], name: "userId")
  @@index([tweetId], name: "tweetId")
}

// pscale 유료버전 안 쓰기 위해서 같은 디비 사용
model InstagramUser {
  id            Int                @id @default(autoincrement())
  email         String             @unique
  name          String
  username      String             @unique
  password      String
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  color         String?
  avatarUrl     String?
  backgroundUrl String?
  followers     InstagramFollows[] @relation("followers")
  following     InstagramFollows[] @relation("following")
  feeds         InstagramFeed[]
  likes         InstagramLike[]
  replys        InstagramReply[]
}

model InstagramFollows {
  id          Int           @id @default(autoincrement())
  follower    InstagramUser @relation("followers", fields: [followerId], references: [id])
  followerId  Int
  following   InstagramUser @relation("following", fields: [followingId], references: [id])
  followingId Int

  @@index([followerId])
  @@index([followingId])
}

model InstagramFeed {
  id        Int              @id @default(autoincrement())
  text      String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      InstagramUser    @relation(fields: [userId], references: [id])
  userId    Int
  imageUrl  String?
  views     Int              @default(0)
  likes     InstagramLike[]
  replys    InstagramReply[]

  @@index([userId], name: "userId")
}

model InstagramLike {
  id        Int           @id @default(autoincrement())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      InstagramUser @relation(fields: [userId], references: [id])
  userId    Int
  feed      InstagramFeed @relation(fields: [feedId], references: [id])
  feedId    Int

  @@index([userId], name: "userId")
  @@index([feedId], name: "feedId")
}

model InstagramReply {
  id        Int           @id @default(autoincrement())
  text      String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      InstagramUser @relation(fields: [userId], references: [id])
  userId    Int
  feed      InstagramFeed @relation(fields: [feedId], references: [id])
  feedId    Int

  @@index([userId], name: "userId")
  @@index([feedId], name: "feedId")
}
